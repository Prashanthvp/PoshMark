package util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import model.FinalObject;
import model.ServerCPUDetails;

public class Utils {	

	public static List<List<Integer>> combinationSum(List<Integer> candidates, int target) {
		List<List<Integer>> result = new ArrayList<>();
		List<Integer> temp = new ArrayList<>();
		helper(candidates, 0, target, 0, temp, result);
		return result;
	}

	private static void helper(List<Integer> candidates, int start, int target, int sum,
			List<Integer> list, List<List<Integer>> result) {

		if (sum > target)
			return;

		if (sum == target) {			
			result.add(new ArrayList<>(list));
			return;
		}

		for (int i = start; i < candidates.size(); i++) {
			list.add(candidates.get(i));
			helper(candidates, i, target, sum+candidates.get(i), list, result);
			list.remove(list.size()-1);
		}
	}
	
	public static void printResult(List<FinalObject> result , boolean printMin) {

		if(!result.isEmpty()) {		
			for(FinalObject ar:result) {
				System.out.println("Name: "+ ar.getName());

				System.out.println("Price: "+ar.getPrice());			

				HashMap<String, Float> c = ar.getStack();

				System.out.println("Stack Details");

				for (Map.Entry<String, Float> entry : c.entrySet()) {
					if (entry.getValue() > 0)
						System.out.println(entry.getKey() + ":" + entry.getValue());
				}
				
				System.out.println();

				if (printMin)
					return;				
			}
		} else 			
			System.out.println("Combo not possible for given price");
	}

	public static List<Integer> getCPUsCount(String region) {

		List<Integer> cpus = new ArrayList<>();

		HashMap<String, Float> map = ServerCPUDetails.serverDetails.get(region);

		HashMap<String, Integer> cpuSize = ServerCPUDetails.serverCPUDetailSize;	

		for (Map.Entry<String, Float> entry : map.entrySet()) {
			String key = entry.getKey();
			if (cpuSize.containsKey(key))
				cpus.add(cpuSize.get(key));			
		}	
		return cpus;
	}
	
	public static HashMap<Integer, String> getserverCPUDetails() {

		HashMap<Integer,String> cpuDetails = new HashMap<>();		

		HashMap<String, Integer> cpuSize = ServerCPUDetails.serverCPUDetailSize;

		for (Map.Entry<String, Integer> entry : cpuSize.entrySet()) 
			cpuDetails.put(entry.getValue(), entry.getKey());

		return cpuDetails;	
	}
}
